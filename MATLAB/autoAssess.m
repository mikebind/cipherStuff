function resultsStruct = autoAssess(enciphFcn, plainText)
% Automatically assess the effect of an encipherment scheme in terms of how
% much repetition is seen in the ciphertext and the repetition spacings.

cipherText = enciphFcn(plainText);
cipherInts = cast(cipherText, 'uint8');
lower_mask = cipherInts > 96 & cipherInts < 123;
upper_mask = cipherInts > 64 & cipherInts < 91; 
o_ = lower(cipherText);
o_(~upper_mask & ~lower_mask) = '_'; % replace all non-letters with underscores
rw = find_repeated_words(o_);

% Convert this to a table with columns: word, length, number of repeats
for rwIdx = 1:length(rw)
    entry = rw{rwIdx};
    word{rwIdx,1} = entry{1};
    wordLength(rwIdx,1) = length(entry{1});
    numberOfRepeats(rwIdx,1) = length(entry{2});
    locations{rwIdx,1} = entry{2};
    spacings{rwIdx,1} = findAllDiffs(entry{2});

end
repeatedWordsTable = table(word,wordLength, numberOfRepeats, locations, spacings);
% Sort it by longest repeated word, then by more repeats
resultsStruct.repeatedWordsTable = sortrows(repeatedWordsTable,[2,3],{'descend','descend'});

% Summarize
resultsStruct.longestRepeatedWord = max(wordLength);
resultsStruct.numberOfRepeatedWords = length(word);
resultsStruct.totalNumberOfRepeats = sum(numberOfRepeats)-length(word); % don't count first instances

% Could screen these to make sure they are real by comparing with
% plainText...

% Periodicity analysis
% To do this we want the sequence of offsets generated by the enciphFcn
% We can obtain that by enciphering a long sequence of 'a's as the
% plaintext, because 'a' gives us the offset with no influence from the
% multiplier.
toLettIdx = @(c) double(lower(c))-96;
offsetSequence = toLettIdx(enciphFcn(repmat('a',1,10000)));
[r,lags] = categoricalAutoCorr(offsetSequence);
resultsStruct.autoCorr = r;
resultsStruct.autoCorrLags = lags;
minHeight = mean(r(r>0)); % don't count any peaks below the mean height of non-zero values
[pks,locs,~,proms] = findpeaks(r, lags, 'MinPeakHeight',minHeight);
resultsStruct.apparentShortCycle = mode(diff(locs));
[pks,locs,~,proms] = findpeaks(r, lags, 'MinPeakDistance',10, 'MinPeakHeight', minHeight);
resultsStruct.apparentMidCycle = mode(diff(locs));
[pks,locs,~,proms] = findpeaks(r, lags, 'MinPeakDistance',50, 'MinPeakHeight', 0.9);
resultsStruct.apparentLongCycle = mode(diff(locs));

figure; 
plot(lags, r); 
xlabel('Lag (characters)')
ylabel('Categorical Autocorrelation')


% Number of potential N-character repeats


end

function allDiffs = findAllDiffs(locations)
allDiffs = [];
for locIdx = 1:length(locations)-1
    allDiffs = [allDiffs, locations(locIdx+1:end) - locations(locIdx)];
end
end